name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build release artifacts
  build:
    name: Build Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-apple-darwin, x86_64-pc-windows-msvc]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-${{ matrix.target }}-

      - name: Build release binaries
        run: |
          cargo build --release --workspace --target ${{ matrix.target }}
          
          # Create release directory
          mkdir -p release/${{ matrix.target }}
          
          # Copy binaries
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ]; then
            cp target/${{ matrix.target }}/release/lattice-compiler release/${{ matrix.target }}/
            cp target/${{ matrix.target }}/release/lattice-pm release/${{ matrix.target }}/
          elif [ "${{ matrix.target }}" = "x86_64-apple-darwin" ]; then
            cp target/${{ matrix.target }}/release/lattice-compiler release/${{ matrix.target }}/
            cp target/${{ matrix.target }}/release/lattice-pm release/${{ matrix.target }}/
          elif [ "${{ matrix.target }}" = "x86_64-pc-windows-msvc" ]; then
            cp target/${{ matrix.target }}/release/lattice-compiler.exe release/${{ matrix.target }}/
            cp target/${{ matrix.target }}/release/lattice-pm.exe release/${{ matrix.target }}/
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.target }}
          path: release/${{ matrix.target }}

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-*/lattice-*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to crates.io (optional, requires secrets)
  publish:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Publish lattice-compiler
        run: |
          cd packages/compiler
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Publish lattice-pm
        run: |
          cd packages/pm
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Publish lattice-stdlib
        run: |
          cd packages/stdlib
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }} 